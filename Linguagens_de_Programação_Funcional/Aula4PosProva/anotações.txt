Multiplica os valores da lista

mulValorLista:: [Integer] -> [Integer]
mulValorLista _ [] = []
mulValorLista x (x:ns) = (x*n) : mulValorLista x ns


Passar a função quer você quer usar
            issso quer dizer que pasos uma função (int -> int)
aplicar:: (Integer->Integer) ->(Integer) ->[Integer]
aplicar _ [] = []
aplicar f (n:ns) = (f n) : aplicar f ns

Exemplo:
>aplicar(*2) [1,2,3]




--Recebe listas e retorna a cabeça, Recebe uma lista de lista. Função "map head" retorna as cabeças da lista
--Aplica map head em cada uma das listas usadas como parametro  e retorna uma lista com as cabeças
heads::[[a]] -> [a]
heads = map head


--filter::(a -> Bool) -> [a] -> [a]
-- é uma função do haskel que retorna o valor desejado, exemplo de uso filter (>3) [4,5,3] o retorno vai ser [4,5]




----- FOLDS
Ex1:
sum::[Integer] -> Integer
sum[] = 0
sum (x:xs) = x + sum xs

Ex2:
concat::[[a]] =>[a]
concat [] = []
concat (x:xs) = x ++ concat xs

Padrão de recursão fold. Não retorna lista e sim um valor baseado nela.





------------- FOLD R (DOBRA A DIREITA)

             

  ---- Função de ordem superior, é uma função na qual sua assinatura você pode passa uma função como argumento
  foldr:: (a->b->b) -> b ->[a] -> b  
  foldr f acc[] = acc
  foldr f acc (x:xs) = f x (foldr f acc xs)

   - primeiro argumento do foldr é uma função de 2 argumentos
        - O segundo argumento é o acumulador
            -O terceiro argumento é a lista que será "dobrada"


Por exemplo
foldr (+) 0 [1,2,3]

    Retorna 6


foldr (/) 1 [2,3,4]
((/)2 ((/)3((/)4 1)))


4/1 ---->  3/4 ------> 2/0.75



---------- FOLD L 

foldl:: (a->b->c) -> a -> [b] -> A
foldl f acc [] = acc
foldl f acc(x:xs) = fold f (f acc x)xs

exemplo:
fold(/) 1 [2,3,4]
((/)((/)((/)1 2)3)4)

1/2 ------> 0.5/3 ------> 0.16/4 ----> 0.04