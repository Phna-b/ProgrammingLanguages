Módulos 

É uma coleção de funções, tipos e classes.

A sintaxe para importar módulos em um script haskell é import <nome do módulo>.

Ex:

Prelude>import Data.List

Data.list> :type find

find:: Foldable t => (a -> Bool) -> t a -> Maybe A

O tipo Maybe (talvez) define dois contextos relacionados: Notthing (Nada) e Just a (Simplesmente a) onde a é um elmento que nós definimos, como um número ou uma string:

    data Maybe a = Nothing | Just A

Assim como uma lista pode ser uma lista vazia ou uma lista com alguns elementos , um valor Mayne pode ser nenhum elemento ou um único elemento.



Exemplo:

Prelude Data.List> find(>4) [1,2,3,4,77]
Just 77

Prelude Data.List> find(>100) [1,2,3,4,77]
Nothing



#############################
Clase Functor 

é uma classe para tipos que podem ser mapeados (Usar função map)
Possui um unico metodo chamado fmap.

class Functor f where
    fmap::(a->b) -> f a -> f b


Maybe é uma instânica da classe Functor

Instance Functor Maybe where
    fmap f Nothing = Nothing
    fmap f(Just x) = Just(f x)

    Exemplo:
        Prelude Data.List> fmap(2+)(Just 2)
            Just 4

        Prelude Data.List> fmap(2+)[1,2,3]
            [3,4,5]

        
        Prelude Data.List> fmap(+1)(+3)4
            (+3)4 0 -> 7 ===> (+1)7 ====> 8

        (+1)<$>(+3)<$>[1,2,3] -- O <$> substitui o fmap.
            [5,6,7]

        (+1)<$>(+3)<$> Just 6
            Just 10



####################################################
Applicatives

Suponha que queremos os resultados das aplicações de varias funções em uma lista.

Exemplo:

    [(*2), (+3)] <*> [1,2,3]

    Ele executa (*2) na lista
        [2,4,6]

    Posteriormente (+3) 
        [4,5,6]

    E retorna uma lista concatenada [2,4,6,4,5,6]




    Just(+3) <*> Just 2 --- Nesse caso é preciso passar o Just para realizar a operação.

    Retorna Just 5



Difrenças:

Functor f =>(a->b) -> Maybe a -> Maybe b
(<$>) (+2) <$> Just 3 
      Retorna Just 5


(<*>) Just (+2) <*> Just 3
      Retorna Just 5 


Exemplo:

(*) <$> Just 5 <*> Just 3 
    Retorna Just 15

<$> passa o operador de multiplicação para o Just 5, posteriormente aplica a multiplicação da função no just 3. Retorna Just 15.




##############################################
Mônada 


Verifica se X é par e divide por 2, caso conrario nothing. DIV É DIFERENTE DO OPERADOR \ 

half x = if even x 
    then 
        Just (x 'div' 2)
    else Nothing


half 4
    Retorna Just 2

half Just 4
    Retorna ERRO