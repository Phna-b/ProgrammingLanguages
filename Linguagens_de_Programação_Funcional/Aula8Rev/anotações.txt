Listas:
    Listas podem possuir qualquer tipo, desde que TODOS sejam do mesmo tipo.
    Listas podem possuir listas de listas.
        Exemplo: let li = [[1,2],[45,5]]

Tupla:
    Uma tupla é uma coleção de valores de diferentes tipos.
        Exemplo: let tupla = ("bob",235)
    Também podemos ter tuplas de listas, e qualquer combinação.
        Exemplo: listaTupla = ((2,3),[2,3])

Funções de ordem superior:
    São funções que recebem outras funções como argumentos.
    Exemplo: map  
    map :: (a -> b) -> [a] -> [b]

    Exemplo2: 
    multiplicaLista m = map ((*) m)
        >multiplicaLista 2 [1,2,3]

    Exemplo 3:
    filter (>4) [4,34,56,2,51]
        Retorna:[34,56,51]

    
    Função lambda:
        São funções declaradas no momento, "temporarias".
        Exemplo:
            map (\x -> x+1)[1,2,3] = map (+1)[1,2,3]

        Exemplo 2:  (Funciona com tuplas)
            let lista = [(1,2),(3,4)]
            map (\(a,b) -> a + b) lista


Folds
    São funções de ordem superior que tem como argumentos uma função e uma lista.
    Em vez de aplicar a função elemento por elemento, o fold combina os elemntos para obter um único resultado.
    Exemplo: 
        Função sum:
            sum [] = 0
            sum (x:xs) = x + sum xs

        Função concat:
            concat [] = []
            concat (x:xs) = x ++ concat xs


        
    FOLD R (DOBRA A DIREITA):

                

    ---- Função de ordem superior, é uma função na qual sua assinatura você pode passa uma função como argumento
    foldr:: (a->b->b) -> b ->[a] -> b  
    foldr f acc[] = acc
    foldr f acc (x:xs) = f x (foldr f acc xs)

    - primeiro argumento do foldr é uma função de 2 argumentos
            - O segundo argumento é o acumulador
                -O terceiro argumento é a lista que será "dobrada"


    Por exemplo
    foldr (+) 0 [1,2,3]

        Retorna 6


    foldr (/) 1 [2,3,4]
    ((/)2 ((/)3((/)4 1)))


    4/1 ---->  3/4 ------> 2/0.75



    FOLD L: 

    foldl:: (a->b->c) -> a -> [b] -> A
    foldl f acc [] = acc
    foldl f acc(x:xs) = fold f (f acc x)xs

    exemplo:
    fold(/) 1 [2,3,4]
    ((/)((/)((/)1 2)3)4)

    1/2 ------> 0.5/3 ------> 0.16/4 ----> 0.04